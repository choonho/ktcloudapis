// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v4.22.3
// source: ktcloud/api/compute/server.proto

package server

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Request message for creating a server
type CreateServerRequest struct {
	state                    protoimpl.MessageState  `protogen:"open.v1"`
	FlavorRef                string                  `protobuf:"bytes,1,opt,name=flavorRef,proto3" json:"flavorRef,omitempty"`                                                                          // The flavor reference (UUID or URL)
	Name                     string                  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                                                                    // The server name
	Networks                 []*Network              `protobuf:"bytes,3,rep,name=networks,proto3" json:"networks,omitempty"`                                                                            // List of network objects
	AccessIPv4               string                  `protobuf:"bytes,4,opt,name=accessIPv4,proto3" json:"accessIPv4,omitempty"`                                                                        // IPv4 address for server access (optional)
	AccessIPv6               string                  `protobuf:"bytes,5,opt,name=accessIPv6,proto3" json:"accessIPv6,omitempty"`                                                                        // IPv6 address for server access (optional)
	AdminPass                string                  `protobuf:"bytes,6,opt,name=adminPass,proto3" json:"adminPass,omitempty"`                                                                          // Administrative password (optional)
	AvailabilityZone         string                  `protobuf:"bytes,7,opt,name=availability_zone,json=availabilityZone,proto3" json:"availability_zone,omitempty"`                                    // Availability zone (optional)
	BlockDeviceMappingV2     []*BlockDeviceMappingV2 `protobuf:"bytes,8,rep,name=block_device_mapping_v2,json=blockDeviceMappingV2,proto3" json:"block_device_mapping_v2,omitempty"`                    // Block device mapping (optional)
	ImageRef                 string                  `protobuf:"bytes,9,opt,name=imageRef,proto3" json:"imageRef,omitempty"`                                                                            // Image UUID for the server instance (optional)
	KeyName                  string                  `protobuf:"bytes,10,opt,name=key_name,json=keyName,proto3" json:"key_name,omitempty"`                                                              // Key pair name (optional)
	Metadata                 map[string]string       `protobuf:"bytes,11,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // Metadata key-value pairs (optional)
	ConfigDrive              string                  `protobuf:"bytes,12,opt,name=config_drive,json=configDrive,proto3" json:"config_drive,omitempty"`                                                  // Config drive enablement (optional)
	SecurityGroups           []*SecurityGroup        `protobuf:"bytes,13,rep,name=security_groups,json=securityGroups,proto3" json:"security_groups,omitempty"`                                         // Security groups
	UserData                 string                  `protobuf:"bytes,14,opt,name=user_data,json=userData,proto3" json:"user_data,omitempty"`                                                           // User data script (Base64 encoded, optional)
	Description              string                  `protobuf:"bytes,15,opt,name=description,proto3" json:"description,omitempty"`                                                                     // Free-form description (optional)
	Hostname                 string                  `protobuf:"bytes,16,opt,name=hostname,proto3" json:"hostname,omitempty"`                                                                           // Hostname to configure (optional)
	Tags                     []string                `protobuf:"bytes,17,rep,name=tags,proto3" json:"tags,omitempty"`                                                                                   // List of tags (optional)
	TrustedImageCertificates []string                `protobuf:"bytes,18,rep,name=trusted_image_certificates,json=trustedImageCertificates,proto3" json:"trusted_image_certificates,omitempty"`         // List of trusted certificate IDs (optional)
	Host                     string                  `protobuf:"bytes,19,opt,name=host,proto3" json:"host,omitempty"`                                                                                   // Compute service host name (optional)
	HypervisorHostname       string                  `protobuf:"bytes,20,opt,name=hypervisor_hostname,json=hypervisorHostname,proto3" json:"hypervisor_hostname,omitempty"`                             // Hypervisor hostname (optional)
	SchedulerHints           *SchedulerHints         `protobuf:"bytes,21,opt,name=scheduler_hints,json=schedulerHints,proto3" json:"scheduler_hints,omitempty"`                                         // Scheduler hints (optional)
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *CreateServerRequest) Reset() {
	*x = CreateServerRequest{}
	mi := &file_ktcloud_api_compute_server_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateServerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateServerRequest) ProtoMessage() {}

func (x *CreateServerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ktcloud_api_compute_server_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateServerRequest.ProtoReflect.Descriptor instead.
func (*CreateServerRequest) Descriptor() ([]byte, []int) {
	return file_ktcloud_api_compute_server_proto_rawDescGZIP(), []int{0}
}

func (x *CreateServerRequest) GetFlavorRef() string {
	if x != nil {
		return x.FlavorRef
	}
	return ""
}

func (x *CreateServerRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateServerRequest) GetNetworks() []*Network {
	if x != nil {
		return x.Networks
	}
	return nil
}

func (x *CreateServerRequest) GetAccessIPv4() string {
	if x != nil {
		return x.AccessIPv4
	}
	return ""
}

func (x *CreateServerRequest) GetAccessIPv6() string {
	if x != nil {
		return x.AccessIPv6
	}
	return ""
}

func (x *CreateServerRequest) GetAdminPass() string {
	if x != nil {
		return x.AdminPass
	}
	return ""
}

func (x *CreateServerRequest) GetAvailabilityZone() string {
	if x != nil {
		return x.AvailabilityZone
	}
	return ""
}

func (x *CreateServerRequest) GetBlockDeviceMappingV2() []*BlockDeviceMappingV2 {
	if x != nil {
		return x.BlockDeviceMappingV2
	}
	return nil
}

func (x *CreateServerRequest) GetImageRef() string {
	if x != nil {
		return x.ImageRef
	}
	return ""
}

func (x *CreateServerRequest) GetKeyName() string {
	if x != nil {
		return x.KeyName
	}
	return ""
}

func (x *CreateServerRequest) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *CreateServerRequest) GetConfigDrive() string {
	if x != nil {
		return x.ConfigDrive
	}
	return ""
}

func (x *CreateServerRequest) GetSecurityGroups() []*SecurityGroup {
	if x != nil {
		return x.SecurityGroups
	}
	return nil
}

func (x *CreateServerRequest) GetUserData() string {
	if x != nil {
		return x.UserData
	}
	return ""
}

func (x *CreateServerRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateServerRequest) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *CreateServerRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *CreateServerRequest) GetTrustedImageCertificates() []string {
	if x != nil {
		return x.TrustedImageCertificates
	}
	return nil
}

func (x *CreateServerRequest) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *CreateServerRequest) GetHypervisorHostname() string {
	if x != nil {
		return x.HypervisorHostname
	}
	return ""
}

func (x *CreateServerRequest) GetSchedulerHints() *SchedulerHints {
	if x != nil {
		return x.SchedulerHints
	}
	return nil
}

// Network object
type Network struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uuid          string                 `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`                      // Network UUID
	Port          string                 `protobuf:"bytes,2,opt,name=port,proto3" json:"port,omitempty"`                      // Port ID
	FixedIp       string                 `protobuf:"bytes,3,opt,name=fixed_ip,json=fixedIp,proto3" json:"fixed_ip,omitempty"` // Fixed IP address (IPv4)
	Tag           string                 `protobuf:"bytes,4,opt,name=tag,proto3" json:"tag,omitempty"`                        // Device role tag
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Network) Reset() {
	*x = Network{}
	mi := &file_ktcloud_api_compute_server_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Network) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Network) ProtoMessage() {}

func (x *Network) ProtoReflect() protoreflect.Message {
	mi := &file_ktcloud_api_compute_server_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Network.ProtoReflect.Descriptor instead.
func (*Network) Descriptor() ([]byte, []int) {
	return file_ktcloud_api_compute_server_proto_rawDescGZIP(), []int{1}
}

func (x *Network) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *Network) GetPort() string {
	if x != nil {
		return x.Port
	}
	return ""
}

func (x *Network) GetFixedIp() string {
	if x != nil {
		return x.FixedIp
	}
	return ""
}

func (x *Network) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

// Block device mapping v2
type BlockDeviceMappingV2 struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	BootIndex           int32                  `protobuf:"varint,1,opt,name=boot_index,json=bootIndex,proto3" json:"boot_index,omitempty"`                                 // Boot order index
	Uuid                string                 `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`                                                             // UUID of the source resource
	SourceType          string                 `protobuf:"bytes,3,opt,name=source_type,json=sourceType,proto3" json:"source_type,omitempty"`                               // Source type (e.g., image, snapshot)
	DestinationType     string                 `protobuf:"bytes,4,opt,name=destination_type,json=destinationType,proto3" json:"destination_type,omitempty"`                // Destination type (e.g., volume, local)
	VolumeSize          int32                  `protobuf:"varint,5,opt,name=volume_size,json=volumeSize,proto3" json:"volume_size,omitempty"`                              // Volume size (GiB)
	Tag                 string                 `protobuf:"bytes,6,opt,name=tag,proto3" json:"tag,omitempty"`                                                               // Device role tag
	DiskBus             string                 `protobuf:"bytes,7,opt,name=disk_bus,json=diskBus,proto3" json:"disk_bus,omitempty"`                                        // Disk bus type (e.g., scsi, virtio)
	GuestFormat         string                 `protobuf:"bytes,8,opt,name=guest_format,json=guestFormat,proto3" json:"guest_format,omitempty"`                            // Guest file system format
	DeleteOnTermination bool                   `protobuf:"varint,9,opt,name=delete_on_termination,json=deleteOnTermination,proto3" json:"delete_on_termination,omitempty"` // Delete volume on termination
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *BlockDeviceMappingV2) Reset() {
	*x = BlockDeviceMappingV2{}
	mi := &file_ktcloud_api_compute_server_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockDeviceMappingV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockDeviceMappingV2) ProtoMessage() {}

func (x *BlockDeviceMappingV2) ProtoReflect() protoreflect.Message {
	mi := &file_ktcloud_api_compute_server_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockDeviceMappingV2.ProtoReflect.Descriptor instead.
func (*BlockDeviceMappingV2) Descriptor() ([]byte, []int) {
	return file_ktcloud_api_compute_server_proto_rawDescGZIP(), []int{2}
}

func (x *BlockDeviceMappingV2) GetBootIndex() int32 {
	if x != nil {
		return x.BootIndex
	}
	return 0
}

func (x *BlockDeviceMappingV2) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *BlockDeviceMappingV2) GetSourceType() string {
	if x != nil {
		return x.SourceType
	}
	return ""
}

func (x *BlockDeviceMappingV2) GetDestinationType() string {
	if x != nil {
		return x.DestinationType
	}
	return ""
}

func (x *BlockDeviceMappingV2) GetVolumeSize() int32 {
	if x != nil {
		return x.VolumeSize
	}
	return 0
}

func (x *BlockDeviceMappingV2) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *BlockDeviceMappingV2) GetDiskBus() string {
	if x != nil {
		return x.DiskBus
	}
	return ""
}

func (x *BlockDeviceMappingV2) GetGuestFormat() string {
	if x != nil {
		return x.GuestFormat
	}
	return ""
}

func (x *BlockDeviceMappingV2) GetDeleteOnTermination() bool {
	if x != nil {
		return x.DeleteOnTermination
	}
	return false
}

// Scheduler hints
type SchedulerHints struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	BuildNearHostIp string                 `protobuf:"bytes,1,opt,name=build_near_host_ip,json=buildNearHostIp,proto3" json:"build_near_host_ip,omitempty"` // Build near specific IP
	Cidr            string                 `protobuf:"bytes,2,opt,name=cidr,proto3" json:"cidr,omitempty"`                                                  // CIDR range for scheduling
	DifferentHost   []string               `protobuf:"bytes,3,rep,name=different_host,json=differentHost,proto3" json:"different_host,omitempty"`           // List of servers to avoid
	SameHost        []string               `protobuf:"bytes,4,rep,name=same_host,json=sameHost,proto3" json:"same_host,omitempty"`                          // List of servers to colocate with
	Group           string                 `protobuf:"bytes,5,opt,name=group,proto3" json:"group,omitempty"`                                                // Server group UUID
	TargetCell      string                 `protobuf:"bytes,6,opt,name=target_cell,json=targetCell,proto3" json:"target_cell,omitempty"`                    // Target cell name
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *SchedulerHints) Reset() {
	*x = SchedulerHints{}
	mi := &file_ktcloud_api_compute_server_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SchedulerHints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchedulerHints) ProtoMessage() {}

func (x *SchedulerHints) ProtoReflect() protoreflect.Message {
	mi := &file_ktcloud_api_compute_server_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchedulerHints.ProtoReflect.Descriptor instead.
func (*SchedulerHints) Descriptor() ([]byte, []int) {
	return file_ktcloud_api_compute_server_proto_rawDescGZIP(), []int{3}
}

func (x *SchedulerHints) GetBuildNearHostIp() string {
	if x != nil {
		return x.BuildNearHostIp
	}
	return ""
}

func (x *SchedulerHints) GetCidr() string {
	if x != nil {
		return x.Cidr
	}
	return ""
}

func (x *SchedulerHints) GetDifferentHost() []string {
	if x != nil {
		return x.DifferentHost
	}
	return nil
}

func (x *SchedulerHints) GetSameHost() []string {
	if x != nil {
		return x.SameHost
	}
	return nil
}

func (x *SchedulerHints) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *SchedulerHints) GetTargetCell() string {
	if x != nil {
		return x.TargetCell
	}
	return ""
}

type CreateServerResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Server        *Server                `protobuf:"bytes,1,opt,name=server,proto3" json:"server,omitempty"` // Server object containing details of the created server
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateServerResponse) Reset() {
	*x = CreateServerResponse{}
	mi := &file_ktcloud_api_compute_server_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateServerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateServerResponse) ProtoMessage() {}

func (x *CreateServerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ktcloud_api_compute_server_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateServerResponse.ProtoReflect.Descriptor instead.
func (*CreateServerResponse) Descriptor() ([]byte, []int) {
	return file_ktcloud_api_compute_server_proto_rawDescGZIP(), []int{4}
}

func (x *CreateServerResponse) GetServer() *Server {
	if x != nil {
		return x.Server
	}
	return nil
}

// Server object
type Server struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Id               string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                                    // Server UUID
	Links            []*Link                `protobuf:"bytes,2,rep,name=links,proto3" json:"links,omitempty"`                                              // Links to the server
	OS_DCFDiskConfig string                 `protobuf:"bytes,3,opt,name=OS_DCF_diskConfig,json=OSDCFDiskConfig,proto3" json:"OS_DCF_diskConfig,omitempty"` // Disk configuration (AUTO or MANUAL)
	SecurityGroups   []*SecurityGroup       `protobuf:"bytes,4,rep,name=security_groups,json=securityGroups,proto3" json:"security_groups,omitempty"`      // Security groups
	AdminPass        string                 `protobuf:"bytes,5,opt,name=adminPass,proto3" json:"adminPass,omitempty"`                                      // Administrative password (optional)
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Server) Reset() {
	*x = Server{}
	mi := &file_ktcloud_api_compute_server_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Server) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Server) ProtoMessage() {}

func (x *Server) ProtoReflect() protoreflect.Message {
	mi := &file_ktcloud_api_compute_server_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Server.ProtoReflect.Descriptor instead.
func (*Server) Descriptor() ([]byte, []int) {
	return file_ktcloud_api_compute_server_proto_rawDescGZIP(), []int{5}
}

func (x *Server) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Server) GetLinks() []*Link {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *Server) GetOS_DCFDiskConfig() string {
	if x != nil {
		return x.OS_DCFDiskConfig
	}
	return ""
}

func (x *Server) GetSecurityGroups() []*SecurityGroup {
	if x != nil {
		return x.SecurityGroups
	}
	return nil
}

func (x *Server) GetAdminPass() string {
	if x != nil {
		return x.AdminPass
	}
	return ""
}

// Link object
type Link struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Href          string                 `protobuf:"bytes,1,opt,name=href,proto3" json:"href,omitempty"` // URL to the resource
	Rel           string                 `protobuf:"bytes,2,opt,name=rel,proto3" json:"rel,omitempty"`   // Relation type (e.g., self, bookmark)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Link) Reset() {
	*x = Link{}
	mi := &file_ktcloud_api_compute_server_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Link) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Link) ProtoMessage() {}

func (x *Link) ProtoReflect() protoreflect.Message {
	mi := &file_ktcloud_api_compute_server_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Link.ProtoReflect.Descriptor instead.
func (*Link) Descriptor() ([]byte, []int) {
	return file_ktcloud_api_compute_server_proto_rawDescGZIP(), []int{6}
}

func (x *Link) GetHref() string {
	if x != nil {
		return x.Href
	}
	return ""
}

func (x *Link) GetRel() string {
	if x != nil {
		return x.Rel
	}
	return ""
}

// Security group object
type SecurityGroup struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"` // Security group name
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SecurityGroup) Reset() {
	*x = SecurityGroup{}
	mi := &file_ktcloud_api_compute_server_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecurityGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecurityGroup) ProtoMessage() {}

func (x *SecurityGroup) ProtoReflect() protoreflect.Message {
	mi := &file_ktcloud_api_compute_server_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecurityGroup.ProtoReflect.Descriptor instead.
func (*SecurityGroup) Descriptor() ([]byte, []int) {
	return file_ktcloud_api_compute_server_proto_rawDescGZIP(), []int{7}
}

func (x *SecurityGroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

var File_ktcloud_api_compute_server_proto protoreflect.FileDescriptor

var file_ktcloud_api_compute_server_proto_rawDesc = string([]byte{
	0x0a, 0x20, 0x6b, 0x74, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f,
	0x6d, 0x70, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x1a, 0x6b, 0x74, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x1a, 0x1c,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x89, 0x08, 0x0a,
	0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x52, 0x65,
	0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x52,
	0x65, 0x66, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x08, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6b, 0x74, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x08, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x49, 0x50, 0x76, 0x34, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x49, 0x50, 0x76, 0x34, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x49, 0x50, 0x76, 0x36, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x49, 0x50, 0x76, 0x36, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x50, 0x61, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x50, 0x61, 0x73, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5a, 0x6f,
	0x6e, 0x65, 0x12, 0x67, 0x0a, 0x17, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x32, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6b, 0x74, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x56, 0x32, 0x52, 0x14, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x56, 0x32, 0x12, 0x1a, 0x0a, 0x08, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x66, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x66, 0x12, 0x19, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x59, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6b, 0x74, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x72, 0x69, 0x76, 0x65,
	0x12, 0x52, 0x0a, 0x0f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6b, 0x74, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x0e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x12, 0x3c, 0x0a, 0x1a, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x09, 0x52, 0x18, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x13, 0x68, 0x79, 0x70, 0x65, 0x72, 0x76, 0x69,
	0x73, 0x6f, 0x72, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x68, 0x79, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x48, 0x6f,
	0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x53, 0x0a, 0x0f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x5f, 0x68, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x6b, 0x74, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x48, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x0e, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x48, 0x69, 0x6e, 0x74, 0x73, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x5e, 0x0a, 0x07, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x5f, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x49, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x22, 0xba, 0x02, 0x0a, 0x14, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x56,
	0x32, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x75, 0x75, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x74, 0x61, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x62, 0x75, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x69, 0x73, 0x6b, 0x42, 0x75, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x67, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x75, 0x65, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x12, 0x32, 0x0a, 0x15, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x6f, 0x6e, 0x5f, 0x74,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x13, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x6e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xcc, 0x01, 0x0a, 0x0e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x48, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x2b, 0x0a, 0x12, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x5f, 0x6e, 0x65, 0x61, 0x72, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x4e, 0x65, 0x61, 0x72, 0x48,
	0x6f, 0x73, 0x74, 0x49, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x64, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x64, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x69, 0x66,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0d, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x48, 0x6f, 0x73, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x61, 0x6d, 0x65, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x08, 0x73, 0x61, 0x6d, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x65,
	0x6c, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x43, 0x65, 0x6c, 0x6c, 0x22, 0x52, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x06,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6b,
	0x74, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75,
	0x74, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x52, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x22, 0xee, 0x01, 0x0a, 0x06, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6b, 0x74, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x4f,
	0x53, 0x5f, 0x44, 0x43, 0x46, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x4f, 0x53, 0x44, 0x43, 0x46, 0x44, 0x69, 0x73,
	0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x52, 0x0a, 0x0f, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x6b, 0x74, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0e, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x50, 0x61, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x50, 0x61, 0x73, 0x73, 0x22, 0x2c, 0x0a, 0x04, 0x4c, 0x69, 0x6e,
	0x6b, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x68, 0x72, 0x65, 0x66, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x72, 0x65, 0x6c, 0x22, 0x23, 0x0a, 0x0d, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x97, 0x01, 0x0a,
	0x07, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x8b, 0x01, 0x0a, 0x0c, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x2f, 0x2e, 0x6b, 0x74, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x6b, 0x74, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x18, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x12, 0x3a, 0x01, 0x2a, 0x22, 0x0d, 0x2f, 0x76, 0x32, 0x2e, 0x31, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x42, 0x3b, 0x5a, 0x39, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x68, 0x6f, 0x6f, 0x6e, 0x68, 0x6f, 0x2f, 0x6b, 0x74, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x6b, 0x74, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_ktcloud_api_compute_server_proto_rawDescOnce sync.Once
	file_ktcloud_api_compute_server_proto_rawDescData []byte
)

func file_ktcloud_api_compute_server_proto_rawDescGZIP() []byte {
	file_ktcloud_api_compute_server_proto_rawDescOnce.Do(func() {
		file_ktcloud_api_compute_server_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_ktcloud_api_compute_server_proto_rawDesc), len(file_ktcloud_api_compute_server_proto_rawDesc)))
	})
	return file_ktcloud_api_compute_server_proto_rawDescData
}

var file_ktcloud_api_compute_server_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_ktcloud_api_compute_server_proto_goTypes = []any{
	(*CreateServerRequest)(nil),  // 0: ktcloud.api.compute.server.CreateServerRequest
	(*Network)(nil),              // 1: ktcloud.api.compute.server.Network
	(*BlockDeviceMappingV2)(nil), // 2: ktcloud.api.compute.server.BlockDeviceMappingV2
	(*SchedulerHints)(nil),       // 3: ktcloud.api.compute.server.SchedulerHints
	(*CreateServerResponse)(nil), // 4: ktcloud.api.compute.server.CreateServerResponse
	(*Server)(nil),               // 5: ktcloud.api.compute.server.Server
	(*Link)(nil),                 // 6: ktcloud.api.compute.server.Link
	(*SecurityGroup)(nil),        // 7: ktcloud.api.compute.server.SecurityGroup
	nil,                          // 8: ktcloud.api.compute.server.CreateServerRequest.MetadataEntry
}
var file_ktcloud_api_compute_server_proto_depIdxs = []int32{
	1, // 0: ktcloud.api.compute.server.CreateServerRequest.networks:type_name -> ktcloud.api.compute.server.Network
	2, // 1: ktcloud.api.compute.server.CreateServerRequest.block_device_mapping_v2:type_name -> ktcloud.api.compute.server.BlockDeviceMappingV2
	8, // 2: ktcloud.api.compute.server.CreateServerRequest.metadata:type_name -> ktcloud.api.compute.server.CreateServerRequest.MetadataEntry
	7, // 3: ktcloud.api.compute.server.CreateServerRequest.security_groups:type_name -> ktcloud.api.compute.server.SecurityGroup
	3, // 4: ktcloud.api.compute.server.CreateServerRequest.scheduler_hints:type_name -> ktcloud.api.compute.server.SchedulerHints
	5, // 5: ktcloud.api.compute.server.CreateServerResponse.server:type_name -> ktcloud.api.compute.server.Server
	6, // 6: ktcloud.api.compute.server.Server.links:type_name -> ktcloud.api.compute.server.Link
	7, // 7: ktcloud.api.compute.server.Server.security_groups:type_name -> ktcloud.api.compute.server.SecurityGroup
	0, // 8: ktcloud.api.compute.server.Servers.CreateServer:input_type -> ktcloud.api.compute.server.CreateServerRequest
	4, // 9: ktcloud.api.compute.server.Servers.CreateServer:output_type -> ktcloud.api.compute.server.CreateServerResponse
	9, // [9:10] is the sub-list for method output_type
	8, // [8:9] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_ktcloud_api_compute_server_proto_init() }
func file_ktcloud_api_compute_server_proto_init() {
	if File_ktcloud_api_compute_server_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_ktcloud_api_compute_server_proto_rawDesc), len(file_ktcloud_api_compute_server_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ktcloud_api_compute_server_proto_goTypes,
		DependencyIndexes: file_ktcloud_api_compute_server_proto_depIdxs,
		MessageInfos:      file_ktcloud_api_compute_server_proto_msgTypes,
	}.Build()
	File_ktcloud_api_compute_server_proto = out.File
	file_ktcloud_api_compute_server_proto_goTypes = nil
	file_ktcloud_api_compute_server_proto_depIdxs = nil
}
