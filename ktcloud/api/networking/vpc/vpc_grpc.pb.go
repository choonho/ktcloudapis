// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.22.3
// source: ktcloud/api/networking/vpc.proto

package vpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	VPCs_CreateVPC_FullMethodName = "/ktcloud.api.networking.vpc.VPCs/CreateVPC"
	VPCs_DeleteVPC_FullMethodName = "/ktcloud.api.networking.vpc.VPCs/DeleteVPC"
	VPCs_ListVPCs_FullMethodName  = "/ktcloud.api.networking.vpc.VPCs/ListVPCs"
	VPCs_GetVPC_FullMethodName    = "/ktcloud.api.networking.vpc.VPCs/GetVPC"
)

// VPCsClient is the client API for VPCs service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// VPC API 서비스 정의
type VPCsClient interface {
	CreateVPC(ctx context.Context, in *CreateVPCRequest, opts ...grpc.CallOption) (*VPCResponse, error)
	DeleteVPC(ctx context.Context, in *DeleteVPCRequest, opts ...grpc.CallOption) (*VPCResponse, error)
	ListVPCs(ctx context.Context, in *ListVPCsRequest, opts ...grpc.CallOption) (*ListVPCsResponse, error)
	GetVPC(ctx context.Context, in *GetVPCRequest, opts ...grpc.CallOption) (*VPCResponse, error)
}

type vPCsClient struct {
	cc grpc.ClientConnInterface
}

func NewVPCsClient(cc grpc.ClientConnInterface) VPCsClient {
	return &vPCsClient{cc}
}

func (c *vPCsClient) CreateVPC(ctx context.Context, in *CreateVPCRequest, opts ...grpc.CallOption) (*VPCResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VPCResponse)
	err := c.cc.Invoke(ctx, VPCs_CreateVPC_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vPCsClient) DeleteVPC(ctx context.Context, in *DeleteVPCRequest, opts ...grpc.CallOption) (*VPCResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VPCResponse)
	err := c.cc.Invoke(ctx, VPCs_DeleteVPC_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vPCsClient) ListVPCs(ctx context.Context, in *ListVPCsRequest, opts ...grpc.CallOption) (*ListVPCsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListVPCsResponse)
	err := c.cc.Invoke(ctx, VPCs_ListVPCs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vPCsClient) GetVPC(ctx context.Context, in *GetVPCRequest, opts ...grpc.CallOption) (*VPCResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VPCResponse)
	err := c.cc.Invoke(ctx, VPCs_GetVPC_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VPCsServer is the server API for VPCs service.
// All implementations must embed UnimplementedVPCsServer
// for forward compatibility.
//
// VPC API 서비스 정의
type VPCsServer interface {
	CreateVPC(context.Context, *CreateVPCRequest) (*VPCResponse, error)
	DeleteVPC(context.Context, *DeleteVPCRequest) (*VPCResponse, error)
	ListVPCs(context.Context, *ListVPCsRequest) (*ListVPCsResponse, error)
	GetVPC(context.Context, *GetVPCRequest) (*VPCResponse, error)
	mustEmbedUnimplementedVPCsServer()
}

// UnimplementedVPCsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVPCsServer struct{}

func (UnimplementedVPCsServer) CreateVPC(context.Context, *CreateVPCRequest) (*VPCResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVPC not implemented")
}
func (UnimplementedVPCsServer) DeleteVPC(context.Context, *DeleteVPCRequest) (*VPCResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVPC not implemented")
}
func (UnimplementedVPCsServer) ListVPCs(context.Context, *ListVPCsRequest) (*ListVPCsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVPCs not implemented")
}
func (UnimplementedVPCsServer) GetVPC(context.Context, *GetVPCRequest) (*VPCResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVPC not implemented")
}
func (UnimplementedVPCsServer) mustEmbedUnimplementedVPCsServer() {}
func (UnimplementedVPCsServer) testEmbeddedByValue()              {}

// UnsafeVPCsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VPCsServer will
// result in compilation errors.
type UnsafeVPCsServer interface {
	mustEmbedUnimplementedVPCsServer()
}

func RegisterVPCsServer(s grpc.ServiceRegistrar, srv VPCsServer) {
	// If the following call pancis, it indicates UnimplementedVPCsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&VPCs_ServiceDesc, srv)
}

func _VPCs_CreateVPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVPCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VPCsServer).CreateVPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VPCs_CreateVPC_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VPCsServer).CreateVPC(ctx, req.(*CreateVPCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VPCs_DeleteVPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVPCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VPCsServer).DeleteVPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VPCs_DeleteVPC_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VPCsServer).DeleteVPC(ctx, req.(*DeleteVPCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VPCs_ListVPCs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVPCsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VPCsServer).ListVPCs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VPCs_ListVPCs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VPCsServer).ListVPCs(ctx, req.(*ListVPCsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VPCs_GetVPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVPCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VPCsServer).GetVPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VPCs_GetVPC_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VPCsServer).GetVPC(ctx, req.(*GetVPCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VPCs_ServiceDesc is the grpc.ServiceDesc for VPCs service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VPCs_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ktcloud.api.networking.vpc.VPCs",
	HandlerType: (*VPCsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateVPC",
			Handler:    _VPCs_CreateVPC_Handler,
		},
		{
			MethodName: "DeleteVPC",
			Handler:    _VPCs_DeleteVPC_Handler,
		},
		{
			MethodName: "ListVPCs",
			Handler:    _VPCs_ListVPCs_Handler,
		},
		{
			MethodName: "GetVPC",
			Handler:    _VPCs_GetVPC_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ktcloud/api/networking/vpc.proto",
}
